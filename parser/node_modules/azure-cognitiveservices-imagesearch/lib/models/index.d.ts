/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Response base
 */
export interface ResponseBase {
  /**
   * Polymorphic Discriminator
   */
  _type: string;
}

/**
 * Defines the identity of a resource.
 */
export interface Identifiable extends ResponseBase {
  /**
   * A String identifier.
   */
  readonly id?: string;
}

/**
 * Defines a response. All schemas that could be returned at the root of a response should inherit
 * from this
 */
export interface Response extends Identifiable {
  /**
   * The URL that returns this resource.
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   */
  readonly webSearchUrl?: string;
}

/**
 * Defines a thing.
 */
export interface Thing extends Response {
  /**
   * The name of the thing represented by this object.
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   */
  readonly url?: string;
  /**
   * An image of the item.
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   */
  readonly description?: string;
  /**
   * An alias for the item
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   */
  readonly bingId?: string;
}

/**
 * Defines an organization.
 */
export interface Organization extends Thing {
}

/**
 * Defines an item.
 */
export interface PropertiesItem {
  /**
   * Text representation of an item.
   */
  readonly text?: string;
  /**
   * Polymorphic Discriminator
   */
  _type: string;
}

/**
 * Defines a rating.
 */
export interface Rating extends PropertiesItem {
  /**
   * The mean (average) rating. The possible values are 1.0 through 5.0.
   */
  ratingValue: number;
  /**
   * The highest rated review. The possible values are 1.0 through 5.0.
   */
  readonly bestRating?: number;
}

/**
 * Defines the metrics that indicate how well an item was rated by others.
 */
export interface AggregateRating extends Rating {
  /**
   * The number of times the recipe has been rated or reviewed.
   */
  readonly reviewCount?: number;
}

/**
 * Defines a merchant's offer.
 */
export interface Offer extends Thing {
  /**
   * Seller for this offer
   */
  readonly seller?: Organization;
  /**
   * The item's price.
   */
  readonly price?: number;
  /**
   * The monetary currency. For example, USD. Possible values include: 'USD', 'CAD', 'GBP', 'EUR',
   * 'COP', 'JPY', 'CNY', 'AUD', 'INR', 'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AWG',
   * 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD',
   * 'BTN', 'BWP', 'BYR', 'BZD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'COU', 'CRC', 'CUC',
   * 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'FJD', 'FKP', 'GEL',
   * 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS',
   * 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD',
   * 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT',
   * 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK',
   * 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD',
   * 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP',
   * 'STD', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH',
   * 'UGX', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XOF', 'XPF', 'YER', 'ZAR',
   * 'ZMW'
   */
  readonly priceCurrency?: string;
  /**
   * The item's availability. The following are the possible values: Discontinued, InStock,
   * InStoreOnly, LimitedAvailability, OnlineOnly, OutOfStock, PreOrder, SoldOut. Possible values
   * include: 'Discontinued', 'InStock', 'InStoreOnly', 'LimitedAvailability', 'OnlineOnly',
   * 'OutOfStock', 'PreOrder', 'SoldOut'
   */
  readonly availability?: string;
  /**
   * An aggregated rating that indicates how well the product has been rated by others.
   */
  readonly aggregateRating?: AggregateRating;
  /**
   * The last date that the offer was updated. The date is in the form YYYY-MM-DD.
   */
  readonly lastUpdated?: string;
}

/**
 * Defines a list of offers from merchants that are related to the image.
 */
export interface AggregateOffer extends Offer {
  /**
   * A list of offers from merchants that have offerings related to the image.
   */
  readonly offers?: Offer[];
}

/**
 * Defines a count of the number of websites where you can shop or perform other actions related to
 * the image.
 */
export interface ImagesImageMetadata {
  /**
   * The number of websites that offer goods of the products seen in the image.
   */
  readonly shoppingSourcesCount?: number;
  /**
   * The number of websites that offer recipes of the food seen in the image.
   */
  readonly recipeSourcesCount?: number;
  /**
   * A summary of the online offers of products found in the image. For example, if the image is of
   * a dress, the offer might identify the lowest price and the number of offers found. Only
   * visually similar products insights include this field. The offer includes the following
   * fields: Name, AggregateRating, OfferCount, and LowPrice.
   */
  readonly aggregateOffer?: AggregateOffer;
}

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs,
 * etc.
 */
export interface CreativeWork extends Thing {
  /**
   * The URL to a thumbnail of the item.
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   */
  readonly provider?: Thing[];
  /**
   * The date on which the CreativeWork was published.
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   */
  readonly text?: string;
}

/**
 * Defines a media object.
 */
export interface MediaObject extends CreativeWork {
  /**
   * Original URL to retrieve the source (file) for the media object (e.g the source URL for the
   * image).
   */
  readonly contentUrl?: string;
  /**
   * URL of the page that hosts the media object.
   */
  readonly hostPageUrl?: string;
  /**
   * Size of the media object content (use format "value unit" e.g "1024 B").
   */
  readonly contentSize?: string;
  /**
   * Encoding format (e.g mp3, mp4, jpeg, etc).
   */
  readonly encodingFormat?: string;
  /**
   * Display URL of the page that hosts the media object.
   */
  readonly hostPageDisplayUrl?: string;
  /**
   * The width of the source media object, in pixels.
   */
  readonly width?: number;
  /**
   * The height of the source media object, in pixels.
   */
  readonly height?: number;
}

/**
 * Defines an image
 */
export interface ImageObject extends MediaObject {
  /**
   * The URL to a thumbnail of the image
   */
  readonly thumbnail?: ImageObject;
  /**
   * The token that you use in a subsequent call to the Image Search API to get additional
   * information about the image. For information about using this token, see the insightsToken
   * query parameter.
   */
  readonly imageInsightsToken?: string;
  /**
   * A count of the number of websites where you can shop or perform other actions related to the
   * image. For example, if the image is of an apple pie, this object includes a count of the
   * number of websites where you can buy an apple pie. To indicate the number of offers in your
   * UX, include badging such as a shopping cart icon that contains the count. When the user clicks
   * on the icon, use imageInsightsToken to get the list of websites.
   */
  readonly insightsMetadata?: ImagesImageMetadata;
  /**
   * Unique Id for the image
   */
  readonly imageId?: string;
  /**
   * A three-byte hexadecimal number that represents the color that dominates the image. Use the
   * color as the temporary background in your client until the image is loaded.
   */
  readonly accentColor?: string;
  /**
   * Visual representation of the image. Used for getting more sizes
   */
  readonly visualWords?: string;
}

/**
 * Defines a search query.
 */
export interface Query {
  /**
   * The query string. Use this string as the query term in a new search request.
   */
  text: string;
  /**
   * The display version of the query term. This version of the query term may contain special
   * characters that highlight the search term found in the query string. The string contains the
   * highlighting characters only if the query enabled hit highlighting
   */
  readonly displayText?: string;
  /**
   * The URL that takes the user to the Bing search results page for the query.Only related search
   * results include this field.
   */
  readonly webSearchUrl?: string;
  /**
   * The URL that you use to get the results of the related search. Before using the URL, you must
   * append query parameters as appropriate and include the Ocp-Apim-Subscription-Key header. Use
   * this URL if you're displaying the results in your own user interface. Otherwise, use the
   * webSearchUrl URL.
   */
  readonly searchLink?: string;
  /**
   * The URL to a thumbnail of a related image.
   */
  readonly thumbnail?: ImageObject;
}

/**
 * Defines the pivot segment.
 */
export interface PivotSuggestions {
  /**
   * The segment from the original query to pivot on.
   */
  pivot: string;
  /**
   * A list of suggested queries for the pivot.
   */
  suggestions: Query[];
}

/**
 * Defines an answer.
 */
export interface Answer extends Response {
}

/**
 * Defines a search result answer.
 */
export interface SearchResultsAnswer extends Answer {
  /**
   * The estimated number of webpages that are relevant to the query. Use this number along with
   * the count and offset query parameters to page the results.
   */
  readonly totalEstimatedMatches?: number;
}

/**
 * Defines an image answer
 */
export interface Images extends SearchResultsAnswer {
  /**
   * Used as part of deduping. Tells client the next offset that client should use in the next
   * pagination request
   */
  readonly nextOffset?: number;
  /**
   * A list of image objects that are relevant to the query. If there are no results, the List is
   * empty.
   */
  value: ImageObject[];
  /**
   * A list of expanded queries that narrows the original query. For example, if the query was
   * Microsoft Surface, the expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface
   * RT, Microsoft Surface Phone, and Microsoft Surface Hub.
   */
  readonly queryExpansions?: Query[];
  /**
   * A list of segments in the original query. For example, if the query was Red Flowers, Bing
   * might segment the query into Red and Flowers. The Flowers pivot may contain query suggestions
   * such as Red Peonies and Red Daisies, and the Red pivot may contain query suggestions such as
   * Green Flowers and Yellow Flowers.
   */
  readonly pivotSuggestions?: PivotSuggestions[];
  /**
   * A list of terms that are similar in meaning to the user's query term.
   */
  readonly similarTerms?: Query[];
}

/**
 * Defines the error that occurred.
 */
export interface ErrorModel {
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'
   */
  code: string;
  /**
   * The error code that further helps to identify the error. Possible values include:
   * 'UnexpectedError', 'ResourceError', 'NotImplemented', 'ParameterMissing',
   * 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
   * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
   */
  readonly subCode?: string;
  /**
   * A description of the error.
   */
  message: string;
  /**
   * A description that provides additional information about the error.
   */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
   */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
   */
  readonly value?: string;
}

/**
 * The top-level response that represents a failed request.
 */
export interface ErrorResponse extends Response {
  /**
   * A list of errors that describe the reasons why the request failed.
   */
  errors: ErrorModel[];
}

/**
 * Defines an image's caption.
 */
export interface ImageInsightsImageCaption {
  /**
   * A caption about the image.
   */
  caption: string;
  /**
   * The URL to the website where the caption was found. You must attribute the caption to the
   * source. For example, by displaying the domain name from the URL next to the caption and using
   * the URL to link to the source website.
   */
  dataSourceUrl: string;
  /**
   * A list of entities found in the caption. Use the contents of the Query object to find the
   * entity in the caption and create a link. The link takes the user to images of the entity.
   */
  relatedSearches: Query[];
}

/**
 * Defines a webpage that is relevant to the query.
 */
export interface WebPage extends CreativeWork {
}

/**
 * Defines a link to a webpage that contains a collection.
 */
export interface CollectionPage extends WebPage {
}

/**
 * Defines a link to a webpage that contains a collection of related images.
 */
export interface ImageGallery extends CollectionPage {
  /**
   * The publisher or social network where the images were found. You must attribute the publisher
   * as the source where the collection was found.
   */
  readonly source?: string;
  /**
   * The number of related images found in the collection.
   */
  readonly imagesCount?: number;
  /**
   * The number of users on the social network that follow the creator.
   */
  readonly followersCount?: number;
}

/**
 * Defines a list of webpages that contain related images.
 */
export interface RelatedCollectionsModule {
  /**
   * A list of webpages that contain related images.
   */
  readonly value?: ImageGallery[];
}

/**
 * Defines a list of images.
 */
export interface ImagesModule {
  /**
   * A list of images.
   */
  readonly value?: ImageObject[];
}

/**
 * Defines a list of related searches.
 */
export interface RelatedSearchesModule {
  /**
   * A list of related searches.
   */
  readonly value?: Query[];
}

/**
 * Defines a cooking recipe.
 */
export interface Recipe extends CreativeWork {
  /**
   * The amount of time the food takes to cook. For example, PT25M. For information about the time
   * format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
   */
  readonly cookTime?: string;
  /**
   * The amount of time required to prepare the ingredients. For example, PT15M. For information
   * about the time format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
   */
  readonly prepTime?: string;
  /**
   * The total amount of time it takes to prepare and cook the recipe. For example, PT45M. For
   * information about the time format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
   */
  readonly totalTime?: string;
}

/**
 * Defines a list of recipes.
 */
export interface RecipesModule {
  /**
   * A list of recipes.
   */
  readonly value?: Recipe[];
}

/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as
 * quantities, structured values, etc.
 */
export interface Intangible extends Thing {
}

export interface StructuredValue extends Intangible {
}

/**
 * Defines a region of an image. The region is defined by the coordinates of the top, left corner
 * and bottom, right corner of the region. The coordinates are fractional values of the original
 * image's width and height in the range 0.0 through 1.0.
*/
export interface NormalizedRectangle extends StructuredValue {
  /**
   * The left coordinate.
  */
  left: number;
  /**
   * The top coordinate
  */
  top: number;
  /**
   * The right coordinate
  */
  right: number;
  /**
   * The bottom coordinate
  */
  bottom: number;
}

/**
 * Defines a recognized entity.
*/
export interface RecognizedEntity extends Response {
  /**
   * The entity that was recognized. The following are the possible entity objects: Person
  */
  readonly entity?: Thing;
  /**
   * The confidence that Bing has that the entity in the image matches this entity. The confidence
   * ranges from 0.0 through 1.0 with 1.0 being very confident.
  */
  readonly matchConfidence?: number;
}

/**
 * Defines a region of the image where an entity was found and a list of entities that might match
 * it.
*/
export interface RecognizedEntityRegion extends Response {
  /**
   * A region of the image that contains an entity. The values of the rectangle are relative to the
   * width and height of the original image and are in the range 0.0 through 1.0. For example, if
   * the image is 300x200 and the region's top, left corner is at point (10, 20) and the bottom,
   * right corner is at point (290, 150), then the normalized rectangle is: Left =
   * 0.0333333333333333, Top = 0.1, Right = 0.9666666666666667, Bottom = 0.75. For people, the
   * region represents the person's face.
  */
  readonly region?: NormalizedRectangle;
  /**
   * A list of entities that Bing believes match the entity found in the region. The entities are
   * in descending order of confidence (see the matchConfidence field of RecognizedEntity).
  */
  readonly matchingEntities?: RecognizedEntity[];
}

/**
 * Defines a group of previously recognized entities.
*/
export interface RecognizedEntityGroup {
  /**
   * The regions of the image that contain entities.
  */
  recognizedEntityRegions: RecognizedEntityRegion[];
  /**
   * The name of the group where images of the entity were also found. The following are possible
   * groups. CelebRecognitionAnnotations: Similar to CelebrityAnnotations but provides a higher
   * probability of an accurate match. CelebrityAnnotations: Contains celebrities such as actors,
   * politicians, athletes, and historical figures.
  */
  name: string;
}

/**
 * Defines a list of previously recognized entities.
*/
export interface RecognizedEntitiesModule {
  /**
   * A list of recognized entities.
  */
  readonly value?: RecognizedEntityGroup[];
}

/**
 * Defines a characteristic of the content found in the image.
*/
export interface InsightsTag {
  /**
   * The name of the characteristic. For example, cat, kitty, calico cat.
  */
  readonly name?: string;
}

/**
 * Defines the characteristics of content found in an image.
*/
export interface ImageTagsModule {
  /**
   * A list of tags that describe the characteristics of the content found in the image. For
   * example, if the image is of a musical artist, the list might include Female, Dress, and Music
   * to indicate the person is female music artist that's wearing a dress.
  */
  value: InsightsTag[];
}

/**
 * The top-level object that the response includes when an image insights request succeeds. For
 * information about requesting image insights, see the
 * [insightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#insightstoken)
 * query parameter. The modules query parameter affects the fields that Bing includes in the
 * response. If you set
 * [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested)
 * to only Caption, then this object includes only the imageCaption field.
*/
export interface ImageInsights extends Response {
  /**
   * A token that you use in a subsequent call to the Image Search API to get more information
   * about the image. For information about using this token, see the insightsToken query
   * parameter. This token has the same usage as the token in the Image object.
  */
  readonly imageInsightsToken?: string;
  /**
   * The query term that best represents the image. Clicking the link in the Query object, takes
   * the user to a webpage with more pictures of the image.
  */
  readonly bestRepresentativeQuery?: Query;
  /**
   * The caption to use for the image.
  */
  readonly imageCaption?: ImageInsightsImageCaption;
  /**
   * A list of links to webpages that contain related images.
  */
  readonly relatedCollections?: RelatedCollectionsModule;
  /**
   * A list of webpages that contain the image. To access the webpage, use the URL in the image's
   * hostPageUrl field.
  */
  readonly pagesIncluding?: ImagesModule;
  /**
   * A list of merchants that offer items related to the image. For example, if the image is of an
   * apple pie, the list contains merchants that are selling apple pies.
  */
  readonly shoppingSources?: AggregateOffer;
  /**
   * A list of related queries made by others.
  */
  readonly relatedSearches?: RelatedSearchesModule;
  /**
   * A list of recipes related to the image. For example, if the image is of an apple pie, the list
   * contains recipes for making an apple pie.
  */
  readonly recipes?: RecipesModule;
  /**
   * A list of images that are visually similar to the original image. For example, if the
   * specified image is of a sunset over a body of water, the list of similar images are of a
   * sunset over a body of water. If the specified image is of a person, similar images might be of
   * the same person or they might be of persons dressed similarly or in a similar setting. The
   * criteria for similarity continues to evolve.
  */
  readonly visuallySimilarImages?: ImagesModule;
  /**
   * A list of images that contain products that are visually similar to products found in the
   * original image. For example, if the specified image contains a dress, the list of similar
   * images contain a dress. The image provides summary information about offers that Bing found
   * online for the product.
  */
  readonly visuallySimilarProducts?: ImagesModule;
  /**
   * A list of groups that contain images of entities that match the entity found in the specified
   * image. For example, the response might include images from the general celebrity group if the
   * entity was recognized in that group.
  */
  readonly recognizedEntityGroups?: RecognizedEntitiesModule;
  /**
   * A list of characteristics of the content found in the image. For example, if the image is of a
   * person, the tags might indicate the person's gender and the type of clothes they're wearing.
  */
  readonly imageTags?: ImageTagsModule;
}

/**
 * Defines an image tile.
*/
export interface TrendingImagesTile {
  /**
   * A query that returns a Bing search results page with more images of the subject. For example,
   * if the category is Popular People Searches, then the thumbnail is of a popular person. The
   * query would return a Bing search results page with more images of that person.
  */
  query: Query;
  /**
   * The image's thumbnail.
  */
  image: ImageObject;
}

/**
 * Defines the category of trending images.
*/
export interface TrendingImagesCategory {
  /**
   * The name of the image category. For example, Popular People Searches.
  */
  title: string;
  /**
   * A list of images that are trending in the category. Each tile contains an image and a URL that
   * returns more images of the subject. For example, if the category is Popular People Searches,
   * the image is of a popular person and the URL would return more images of that person.
  */
  tiles: TrendingImagesTile[];
}

/**
 * The top-level object that the response includes when a trending images request succeeds.
*/
export interface TrendingImages extends Response {
  /**
   * A list that identifies categories of images and a list of trending images in that category.
  */
  categories: TrendingImagesCategory[];
}

/**
 * Defines a person.
*/
export interface Person extends Thing {
  /**
   * The person's job title.
  */
  readonly jobTitle?: string;
  /**
   * The URL of the person's twitter profile.
  */
  readonly twitterProfile?: string;
}
